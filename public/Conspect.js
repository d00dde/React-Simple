//Жизненный цикл React-компонента

//Инициализация:
constructor (props) {   
	super(props);

	this.state = {
		option: props.option //установка начального состояния через передачу свойств
	}
}

componentWillMount () {   //вызывается перед тем, как компонент будет смонтирован
						//используется для получения данных, нужных для работы,
						//запросов на сервер, и т.п.
}

render () { //создат React-компонент, который помещается в виртуальный, а потом и в реальный DOM
		//не должен содержать "тяжелого" и асинхронного кода. 
}

componentDidMount () { //вызывается сразу после размещения компонента в DOM
		//здесь уже можно работать с фактическим DOM: вешать слушатели, получать данные, 
		//реальные размеры и положение в браузере и т.п.
}

//Обновление:
//Причиной обновления компонента является изменение его состояния, либо
//состояния любого из его родителей (вызов setState(state))

componentWillReceiveProps (nextProps) { //вызывается при изменении состояния любого родителя (только родителя)
	//здесь доступны как текущие props, так и обновлнные nextProps
	//используется для проверки, изменились ли props и нужно ли менять 
	//состояние данного компонента
}

shouldComponentUpdate (nextProps, nextState) { //вызывается перед componentWillUpdate, содержит
											   //новые props и state. Тут разработчик может решить, нужно ли
											   //перестраивать компонент, исходя из сравнения старых и новых props и state
 return true;	//если этот метод вернёт true (или не реализован) то компонент будет пересторен
 				//если метод вернёт false, то выполнение методов обновления для компонента будет прекращено
}

//В React есть специальный класс PureComponent. От него наследуются вместо {Component}
//В нём реализован метод shouldComponentUpdate, в котором сравниваются ВСЕ props и state
//и при изменении любого из свойств компонент обновляется. 

componentWillUpdate (nextProps, nextState) { //вызывается после изменения компонента (либо компонента, либо родителя)
		//используется для получения данных, необходимых для нового состояния
		//здесь в аргументах приходят новые props и state, а в свойствах пока старые
}

render () {}

componentDidUpdate (prevProps, prevState) { //вызывается после внесения изменений в фактический DOM
		//используется так же, как и componentDidMount(), но после изменения компонента
		//здесь в аргументах приходят старые props и state, а новые уже применены
}

//Удаление компонента:

componentDidUnmount () { //вызывается при удалении компонента
		//используется для освобождения ресурсов, отписки от событий, и т.п. 

}



